name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'  # Semantic version tags (v1.0.0, v0.2.1, etc.)
    branches:
      - main      # Also build on main for "latest" release
  workflow_dispatch:  # Allow manual triggering

jobs:
  # Build native libraries for multiple platforms
  build-native:
    name: Build Native (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-x64
            artifact: libpsam.so
          - os: macos-latest
            platform: macos-arm64
            artifact: libpsam.dylib
          - os: macos-13  # Intel Mac
            platform: macos-x64
            artifact: libpsam.dylib
          - os: windows-latest
            platform: windows-x64
            artifact: psam.dll

    steps:
      - uses: actions/checkout@v4

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Configure
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=OFF ..

      - name: Build
        run: |
          cd build
          cmake --build . --config Release

      - name: Package
        shell: bash
        run: |
          mkdir -p dist
          cd build

          # Find the library file
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            FOUND=$(find . -name "${{ matrix.artifact }}" | head -1)
          else
            FOUND=$(find . -name "${{ matrix.artifact }}" | head -1)
          fi

          if [ -z "$FOUND" ]; then
            echo "❌ Could not find ${{ matrix.artifact }}"
            echo "Files in build directory:"
            find . -name "*.so" -o -name "*.dylib" -o -name "*.dll"
            exit 1
          fi

          echo "✓ Found library: $FOUND"
          cp "$FOUND" ../dist/${{ matrix.artifact }}
          cd ../dist
          tar -czf libpsam-${{ matrix.platform }}.tar.gz ${{ matrix.artifact }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libpsam-${{ matrix.platform }}
          path: dist/libpsam-${{ matrix.platform }}.tar.gz

  # Build WASM module
  build-wasm:
    name: Build WASM
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: '3.1.50'

      - name: Verify Emscripten
        run: emcc --version

      - name: Build WASM
        run: |
          cd bindings/wasm
          chmod +x build.sh
          ./build.sh

      - name: Package WASM
        run: |
          mkdir -p dist
          cp bindings/wasm/build/psam.wasm dist/
          cp bindings/wasm/build/psam.js dist/
          cd dist
          tar -czf libpsam-wasm.tar.gz psam.wasm psam.js

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libpsam-wasm
          path: dist/libpsam-wasm.tar.gz

  # Create GitHub Release
  release:
    name: Create Release
    needs: [build-native, build-wasm]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
          ls -lh release-assets/

      - name: Determine release info
        id: release_info
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            IS_PRERELEASE=false
            RELEASE_NAME="Release $VERSION"
          else
            VERSION="latest"
            IS_PRERELEASE=true
            RELEASE_NAME="Latest Development Build"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          if [[ "${{ steps.release_info.outputs.version }}" == "latest" ]]; then
            cat << EOF > release_notes.md
          ## Latest Development Build

          This is an automated build from the latest commit on main.

          **Commit:** ${{ github.sha }}
          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ### Artifacts Included:
          - 🐧 Linux x64 native library
          - 🍎 macOS ARM64 native library (Apple Silicon)
          - 🍏 macOS x64 native library (Intel)
          - 🪟 Windows x64 native library
          - 🌐 WebAssembly module

          ⚠️ **Note:** This is a development build. For stable releases, use tagged versions.
          EOF
          else
            cat << EOF > release_notes.md
          ## Release ${{ steps.release_info.outputs.version }}

          ### Artifacts Included:
          - 🐧 **Linux x64**: \`libpsam-linux-x64.tar.gz\`
          - 🍎 **macOS ARM64**: \`libpsam-macos-arm64.tar.gz\` (Apple Silicon)
          - 🍏 **macOS x64**: \`libpsam-macos-x64.tar.gz\` (Intel)
          - 🪟 **Windows x64**: \`libpsam-windows-x64.tar.gz\`
          - 🌐 **WebAssembly**: \`libpsam-wasm.tar.gz\`

          ### Installation:

          **Linux/macOS:**
          \`\`\`bash
          tar -xzf libpsam-<platform>.tar.gz
          sudo cp libpsam.* /usr/local/lib/
          sudo ldconfig  # Linux only
          \`\`\`

          **JavaScript/TypeScript:**
          \`\`\`bash
          npm install @foundation42/libpsam
          \`\`\`

          **Python:**
          \`\`\`bash
          pip install libpsam
          \`\`\`

          ### Documentation:
          - 📚 [API Reference](https://github.com/Foundation42/libpsam/blob/main/docs/API.md)
          - 📖 [How PSAM Works](https://github.com/Foundation42/libpsam/blob/main/docs/PSAM.md)
          - 🚀 [Building from Source](https://github.com/Foundation42/libpsam/blob/main/docs/BUILDING.md)
          - 🌐 [Interactive Demo](https://foundation42.github.io/libpsam/)
          EOF
          fi
          echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create/Update Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.release_info.outputs.release_name }}
          tag_name: ${{ steps.release_info.outputs.version }}
          body_path: ${{ steps.release_notes.outputs.notes_file }}
          prerelease: ${{ steps.release_info.outputs.is_prerelease }}
          files: release-assets/*
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
